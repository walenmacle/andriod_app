// Generated by view binder compiler. Do not edit!
package edu.neu.myapplication5_25.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import edu.neu.myapplication5_25.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentForecastBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout layoutEmpty;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final RecyclerView recyclerViewDaily;

  @NonNull
  public final RecyclerView recyclerViewHourly;

  @NonNull
  public final TextView tabDaily;

  @NonNull
  public final TextView tabHourly;

  @NonNull
  public final TextView textCurrentCity;

  private FragmentForecastBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout layoutEmpty,
      @NonNull ProgressBar progressBar, @NonNull RecyclerView recyclerViewDaily,
      @NonNull RecyclerView recyclerViewHourly, @NonNull TextView tabDaily,
      @NonNull TextView tabHourly, @NonNull TextView textCurrentCity) {
    this.rootView = rootView;
    this.layoutEmpty = layoutEmpty;
    this.progressBar = progressBar;
    this.recyclerViewDaily = recyclerViewDaily;
    this.recyclerViewHourly = recyclerViewHourly;
    this.tabDaily = tabDaily;
    this.tabHourly = tabHourly;
    this.textCurrentCity = textCurrentCity;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentForecastBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentForecastBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_forecast, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentForecastBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.layout_empty;
      LinearLayout layoutEmpty = ViewBindings.findChildViewById(rootView, id);
      if (layoutEmpty == null) {
        break missingId;
      }

      id = R.id.progress_bar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.recycler_view_daily;
      RecyclerView recyclerViewDaily = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewDaily == null) {
        break missingId;
      }

      id = R.id.recycler_view_hourly;
      RecyclerView recyclerViewHourly = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewHourly == null) {
        break missingId;
      }

      id = R.id.tab_daily;
      TextView tabDaily = ViewBindings.findChildViewById(rootView, id);
      if (tabDaily == null) {
        break missingId;
      }

      id = R.id.tab_hourly;
      TextView tabHourly = ViewBindings.findChildViewById(rootView, id);
      if (tabHourly == null) {
        break missingId;
      }

      id = R.id.text_current_city;
      TextView textCurrentCity = ViewBindings.findChildViewById(rootView, id);
      if (textCurrentCity == null) {
        break missingId;
      }

      return new FragmentForecastBinding((LinearLayout) rootView, layoutEmpty, progressBar,
          recyclerViewDaily, recyclerViewHourly, tabDaily, tabHourly, textCurrentCity);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
